
// Generated by Akka gRPC. DO NOT EDIT.
package cityfeed.application.grpc

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder

// Not sealed so users can extend to write their stubs
trait RegisterServiceClient extends RegisterService with RegisterServiceClientPowerApi with AkkaGrpcClient

object RegisterServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): RegisterServiceClient =
    new DefaultRegisterServiceClient(settings)
}

final class DefaultRegisterServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends RegisterServiceClient {
  import RegisterService.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, classOf[DefaultRegisterServiceClient]))

  
  private def registerUserRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    new ScalaUnaryRequestBuilder(registerUserDescriptor, channel, options, settings)
  
  

  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer registerUser(cityfeed.application.grpc.RegisterRequest) if possible.
   */
  
  override def registerUser(): SingleResponseRequestBuilder[cityfeed.application.grpc.RegisterRequest, cityfeed.application.grpc.RegisterResponse] =
    registerUserRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of registerUser
   */
  def registerUser(in: cityfeed.application.grpc.RegisterRequest): scala.concurrent.Future[cityfeed.application.grpc.RegisterResponse] =
    registerUser().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultRegisterServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): RegisterServiceClient =
    new DefaultRegisterServiceClient(settings)
}

trait RegisterServiceClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer registerUser(cityfeed.application.grpc.RegisterRequest) if possible.
   */
  
  def registerUser(): SingleResponseRequestBuilder[cityfeed.application.grpc.RegisterRequest, cityfeed.application.grpc.RegisterResponse] = ???
  
  

}
