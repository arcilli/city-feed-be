// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cityfeed.application.grpc

@SerialVersionUID(0L)
final case class FetchedPosts(
    ownerUser: _root_.scala.Predef.String = "",
    username: _root_.scala.Predef.String = "",
    message: _root_.scala.Predef.String = "",
    base64Image: _root_.scala.Predef.String = "",
    neighborhood: _root_.scala.Predef.String = "",
    tags: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    timestamp: _root_.scala.Predef.String = "",
    edited: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FetchedPosts] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = ownerUser
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = username
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = base64Image
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = neighborhood
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      tags.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      
      {
        val __value = timestamp
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = edited
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = ownerUser
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = username
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = base64Image
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = neighborhood
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      tags.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      {
        val __v = timestamp
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = edited
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withOwnerUser(__v: _root_.scala.Predef.String): FetchedPosts = copy(ownerUser = __v)
    def withUsername(__v: _root_.scala.Predef.String): FetchedPosts = copy(username = __v)
    def withMessage(__v: _root_.scala.Predef.String): FetchedPosts = copy(message = __v)
    def withBase64Image(__v: _root_.scala.Predef.String): FetchedPosts = copy(base64Image = __v)
    def withNeighborhood(__v: _root_.scala.Predef.String): FetchedPosts = copy(neighborhood = __v)
    def clearTags = copy(tags = _root_.scala.Seq.empty)
    def addTags(__vs: _root_.scala.Predef.String *): FetchedPosts = addAllTags(__vs)
    def addAllTags(__vs: Iterable[_root_.scala.Predef.String]): FetchedPosts = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.Seq[_root_.scala.Predef.String]): FetchedPosts = copy(tags = __v)
    def withTimestamp(__v: _root_.scala.Predef.String): FetchedPosts = copy(timestamp = __v)
    def withEdited(__v: _root_.scala.Boolean): FetchedPosts = copy(edited = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = ownerUser
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = username
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = base64Image
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = neighborhood
          if (__t != "") __t else null
        }
        case 6 => tags
        case 7 => {
          val __t = timestamp
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = edited
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(ownerUser)
        case 2 => _root_.scalapb.descriptors.PString(username)
        case 3 => _root_.scalapb.descriptors.PString(message)
        case 4 => _root_.scalapb.descriptors.PString(base64Image)
        case 5 => _root_.scalapb.descriptors.PString(neighborhood)
        case 6 => _root_.scalapb.descriptors.PRepeated(tags.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PString(timestamp)
        case 8 => _root_.scalapb.descriptors.PBoolean(edited)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cityfeed.application.grpc.FetchedPosts.type = cityfeed.application.grpc.FetchedPosts
    // @@protoc_insertion_point(GeneratedMessage[feed.FetchedPosts])
}

object FetchedPosts extends scalapb.GeneratedMessageCompanion[cityfeed.application.grpc.FetchedPosts] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cityfeed.application.grpc.FetchedPosts] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cityfeed.application.grpc.FetchedPosts = {
    var __ownerUser: _root_.scala.Predef.String = ""
    var __username: _root_.scala.Predef.String = ""
    var __message: _root_.scala.Predef.String = ""
    var __base64Image: _root_.scala.Predef.String = ""
    var __neighborhood: _root_.scala.Predef.String = ""
    val __tags: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __timestamp: _root_.scala.Predef.String = ""
    var __edited: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __ownerUser = _input__.readStringRequireUtf8()
        case 18 =>
          __username = _input__.readStringRequireUtf8()
        case 26 =>
          __message = _input__.readStringRequireUtf8()
        case 34 =>
          __base64Image = _input__.readStringRequireUtf8()
        case 42 =>
          __neighborhood = _input__.readStringRequireUtf8()
        case 50 =>
          __tags += _input__.readStringRequireUtf8()
        case 58 =>
          __timestamp = _input__.readStringRequireUtf8()
        case 64 =>
          __edited = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cityfeed.application.grpc.FetchedPosts(
        ownerUser = __ownerUser,
        username = __username,
        message = __message,
        base64Image = __base64Image,
        neighborhood = __neighborhood,
        tags = __tags.result(),
        timestamp = __timestamp,
        edited = __edited,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cityfeed.application.grpc.FetchedPosts] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cityfeed.application.grpc.FetchedPosts(
        ownerUser = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        username = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        base64Image = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        neighborhood = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        tags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        edited = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FeedProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FeedProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cityfeed.application.grpc.FetchedPosts(
    ownerUser = "",
    username = "",
    message = "",
    base64Image = "",
    neighborhood = "",
    tags = _root_.scala.Seq.empty,
    timestamp = "",
    edited = false
  )
  implicit class FetchedPostsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cityfeed.application.grpc.FetchedPosts]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cityfeed.application.grpc.FetchedPosts](_l) {
    def ownerUser: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.ownerUser)((c_, f_) => c_.copy(ownerUser = f_))
    def username: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.username)((c_, f_) => c_.copy(username = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def base64Image: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.base64Image)((c_, f_) => c_.copy(base64Image = f_))
    def neighborhood: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.neighborhood)((c_, f_) => c_.copy(neighborhood = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def edited: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.edited)((c_, f_) => c_.copy(edited = f_))
  }
  final val OWNERUSER_FIELD_NUMBER = 1
  final val USERNAME_FIELD_NUMBER = 2
  final val MESSAGE_FIELD_NUMBER = 3
  final val BASE64IMAGE_FIELD_NUMBER = 4
  final val NEIGHBORHOOD_FIELD_NUMBER = 5
  final val TAGS_FIELD_NUMBER = 6
  final val TIMESTAMP_FIELD_NUMBER = 7
  final val EDITED_FIELD_NUMBER = 8
  def of(
    ownerUser: _root_.scala.Predef.String,
    username: _root_.scala.Predef.String,
    message: _root_.scala.Predef.String,
    base64Image: _root_.scala.Predef.String,
    neighborhood: _root_.scala.Predef.String,
    tags: _root_.scala.Seq[_root_.scala.Predef.String],
    timestamp: _root_.scala.Predef.String,
    edited: _root_.scala.Boolean
  ): _root_.cityfeed.application.grpc.FetchedPosts = _root_.cityfeed.application.grpc.FetchedPosts(
    ownerUser,
    username,
    message,
    base64Image,
    neighborhood,
    tags,
    timestamp,
    edited
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[feed.FetchedPosts])
}
