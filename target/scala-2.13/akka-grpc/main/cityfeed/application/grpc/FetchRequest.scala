// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package cityfeed.application.grpc

@SerialVersionUID(0L)
final case class FetchRequest(
    amount: _root_.scala.Int = 0,
    userId: _root_.scala.Predef.String = "",
    seenPosts: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FetchRequest] {
    private[this] def seenPostsSerializedSize = {
      if (__seenPostsSerializedSizeField == 0) __seenPostsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        seenPosts.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __seenPostsSerializedSizeField
    }
    @transient private[this] var __seenPostsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = amount
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = userId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (seenPosts.nonEmpty) {
        val __localsize = seenPostsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = amount
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = userId
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      if (seenPosts.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(seenPostsSerializedSize)
        seenPosts.foreach(_output__.writeInt32NoTag)
      };
      unknownFields.writeTo(_output__)
    }
    def withAmount(__v: _root_.scala.Int): FetchRequest = copy(amount = __v)
    def withUserId(__v: _root_.scala.Predef.String): FetchRequest = copy(userId = __v)
    def clearSeenPosts = copy(seenPosts = _root_.scala.Seq.empty)
    def addSeenPosts(__vs: _root_.scala.Int *): FetchRequest = addAllSeenPosts(__vs)
    def addAllSeenPosts(__vs: Iterable[_root_.scala.Int]): FetchRequest = copy(seenPosts = seenPosts ++ __vs)
    def withSeenPosts(__v: _root_.scala.Seq[_root_.scala.Int]): FetchRequest = copy(seenPosts = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = amount
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 3 => seenPosts
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(amount)
        case 2 => _root_.scalapb.descriptors.PString(userId)
        case 3 => _root_.scalapb.descriptors.PRepeated(seenPosts.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: cityfeed.application.grpc.FetchRequest.type = cityfeed.application.grpc.FetchRequest
    // @@protoc_insertion_point(GeneratedMessage[feed.FetchRequest])
}

object FetchRequest extends scalapb.GeneratedMessageCompanion[cityfeed.application.grpc.FetchRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[cityfeed.application.grpc.FetchRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): cityfeed.application.grpc.FetchRequest = {
    var __amount: _root_.scala.Int = 0
    var __userId: _root_.scala.Predef.String = ""
    val __seenPosts: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __amount = _input__.readInt32()
        case 18 =>
          __userId = _input__.readStringRequireUtf8()
        case 24 =>
          __seenPosts += _input__.readInt32()
        case 26 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __seenPosts += _input__.readInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    cityfeed.application.grpc.FetchRequest(
        amount = __amount,
        userId = __userId,
        seenPosts = __seenPosts.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[cityfeed.application.grpc.FetchRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      cityfeed.application.grpc.FetchRequest(
        amount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        userId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        seenPosts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FeedProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FeedProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = cityfeed.application.grpc.FetchRequest(
    amount = 0,
    userId = "",
    seenPosts = _root_.scala.Seq.empty
  )
  implicit class FetchRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, cityfeed.application.grpc.FetchRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, cityfeed.application.grpc.FetchRequest](_l) {
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def seenPosts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.seenPosts)((c_, f_) => c_.copy(seenPosts = f_))
  }
  final val AMOUNT_FIELD_NUMBER = 1
  final val USERID_FIELD_NUMBER = 2
  final val SEENPOSTS_FIELD_NUMBER = 3
  def of(
    amount: _root_.scala.Int,
    userId: _root_.scala.Predef.String,
    seenPosts: _root_.scala.Seq[_root_.scala.Int]
  ): _root_.cityfeed.application.grpc.FetchRequest = _root_.cityfeed.application.grpc.FetchRequest(
    amount,
    userId,
    seenPosts
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[feed.FetchRequest])
}
