
// Generated by Akka gRPC. DO NOT EDIT.
package cityfeed.application.grpc

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.grpc.scaladsl.StreamResponseRequestBuilder
import akka.grpc.internal.ScalaServerStreamingRequestBuilder

// Not sealed so users can extend to write their stubs
trait FetchServiceClient extends FetchService with FetchServiceClientPowerApi with AkkaGrpcClient

object FetchServiceClient {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): FetchServiceClient =
    new DefaultFetchServiceClient(settings)
}

final class DefaultFetchServiceClient(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider) extends FetchServiceClient {
  import FetchService.MethodDescriptors._

  private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(sys.classicSystem, classOf[DefaultFetchServiceClient]))

  
  private def fetchPostsRequestBuilder(channel: akka.grpc.internal.InternalChannel) =
  
    
    new ScalaServerStreamingRequestBuilder(fetchPostsDescriptor, channel, options, settings)
    
  
  

  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer fetchPosts(cityfeed.application.grpc.FetchRequest) if possible.
   */
  
  override def fetchPosts(): StreamResponseRequestBuilder[cityfeed.application.grpc.FetchRequest, cityfeed.application.grpc.FetchedPosts] =
    fetchPostsRequestBuilder(clientState.internalChannel)
  

  /**
   * For access to method metadata use the parameterless version of fetchPosts
   */
  def fetchPosts(in: cityfeed.application.grpc.FetchRequest): akka.stream.scaladsl.Source[cityfeed.application.grpc.FetchedPosts, akka.NotUsed] =
    fetchPosts().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed: scala.concurrent.Future[akka.Done] = clientState.closed()

}

object DefaultFetchServiceClient {

  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): FetchServiceClient =
    new DefaultFetchServiceClient(settings)
}

trait FetchServiceClientPowerApi {
  
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer fetchPosts(cityfeed.application.grpc.FetchRequest) if possible.
   */
  
  def fetchPosts(): StreamResponseRequestBuilder[cityfeed.application.grpc.FetchRequest, cityfeed.application.grpc.FetchedPosts] = ???
  
  

}
